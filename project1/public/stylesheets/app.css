/* 
colors 
light-green : #7ed56f
dark-green : #55c57a
medium-green : #28b485

 */


/* universal selector */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* The box-sizing property allows us to include the padding and border in an element's total width and height. If you set box-sizing: border-box; on an element, padding and border are included in the width and height: Both divs are the same size now!
 */
}

body {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    height: 95vh;
    /* wat 95vh tells us that view port height (vh) should be 95% at any point of time */
    background-image: linear-gradient(to right, rgba(126, 213, 111, 0.459), rgba(68, 141, 113, 0.65)), url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    /* will go in clockwise direction  */
    /* clip-path: polygon(xy ,xy ,xy); */
    /* clip-path: polygon(1% 1%, 99% 1%, 100% 65%, 0% 99%); */
    clip-path: polygon(0 0, 100% 0, 100% 78%, 0 100%);
    position: relative;
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    /* here by giving height value directly we are giving width value to set by the browser automatically */
    height: 35px;
    animation-name: moveInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
}

.text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* when we does absolute positioning its starts measuring from the center of the text-box  */
}

.heading-primary {
    color: #ffffff;
    text-transform: uppercase;
    backface-visibility: hidden;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    animation-name: moveInLeft;
    animation-duration: 5s;
    animation-timing-function: ease-out;
    /* animation-timing-function tells us that how animation should progress during each cycle  */
    /* animation-iteration-count: ; */
    /* animation-delay: 0.5s; */
    /* this means that animations starts after 3seconds */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17px;
    animation-name: moveInRight;
    animation-duration: 3s;
    /* animation-delay: 1s; */
}


/* creating animations  */


/* The @keyframes rule specifies the animation code.

The animation is created by gradually changing from one set of CSS styles to another.

During the animation, you can change the set of CSS styles many times.

Specify when the style change will happen in percent, or with the keywords "from" and "to", which is the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the animation is complete.

Tip: For best browser support, you should always define both the 0% and the 100% selectors.

Note: Use the animation properties to control the appearance of the animation, and also to bind the animation to selectors.

Note: The !important rule is ignored in a keyframe (See last example on this page).

 */


/* synatx @keyframes and animation name */

@keyframes moveInLeft {
    /* animations starts at 0% */
    0% {
        /* inside we are writing wat will happen when animation is 0% */
        opacity: 0;
        transform: translateX(-100px);
    }
    80% {
        /* inside we are writing wat will happen when animation is 80% */
        transform: translateX(10px);
    }
    /* animation finishes at 100% */
    100% {
        /* inside we are writing wat will happen when animation is 100% */
        opacity: 1;
        transform: translatey(0px);
    }
}

@keyframes moveInRight {
    0% {
        /* inside we are writing wat will happen when animation is 0% */
        opacity: 0;
        transform: translateX(100px);
    }
    /* animation finishes at 100% */
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0px);
    }
}